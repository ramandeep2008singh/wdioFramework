"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = launch;

var _chromeLauncher = require("chrome-launcher");

var _puppeteerCore = _interopRequireDefault(require("puppeteer-core"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _utils = require("./utils");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('devtools');

async function launchChrome(capabilities) {
  const chromeOptions = capabilities['goog:chromeOptions'] || {};
  const chromeFlags = [..._constants.DEFAULT_FLAGS, ...[`--window-position=${_constants.DEFAULT_X_POSITION},${_constants.DEFAULT_Y_POSITION}`, `--window-size=${_constants.DEFAULT_WIDTH},${_constants.DEFAULT_HEIGHT}`], ...(chromeOptions.headless ? ['--headless', '--no-sandbox'] : []), ...(chromeOptions.args || [])];
  log.info(`Launch Chrome with flags: ${chromeFlags.join(' ')}`);
  const chrome = await (0, _chromeLauncher.launch)({
    chromePath: chromeOptions.binary,
    chromeFlags
  });
  log.info(`Connect Puppeteer with browser on port ${chrome.port}`);
  const browser = await _puppeteerCore.default.connect({
    browserURL: `http://localhost:${chrome.port}`,
    defaultViewport: null
  });
  const pages = await (0, _utils.getPages)(browser);

  for (const page of pages.slice(0, -1)) {
    if (page.url() === 'about:blank') {
      await page.close();
    }
  }

  return browser;
}

function launchFirefox(capabilities) {
  const puppeteerFirefox = require('puppeteer-firefox');

  const firefoxOptions = capabilities['moz:firefoxOptions'] || {};
  return puppeteerFirefox.launch({
    args: firefoxOptions.args || [],
    headless: Boolean(firefoxOptions.headless),
    defaultViewport: {
      width: firefoxOptions.width || _constants.DEFAULT_WIDTH,
      height: firefoxOptions.height || _constants.DEFAULT_HEIGHT
    }
  });
}

function launchEdge() {
  throw new Error('not yet implemented');
}

function launch(capabilities) {
  const browserName = capabilities.browserName.toLowerCase();

  if (_constants.CHROME_NAMES.includes(browserName)) {
    return launchChrome(capabilities);
  }

  if (_constants.FIREFOX_NAMES.includes(browserName)) {
    return launchFirefox(capabilities);
  }

  if (_constants.EDGE_NAMES.includes(browserName)) {
    return launchEdge(capabilities);
  }

  throw new Error(`Couldn't identify browserName ${browserName}`);
}
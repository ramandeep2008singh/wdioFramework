"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findCDPInterface = findCDPInterface;
exports.getCDPClient = getCDPClient;
exports.readIOStream = readIOStream;
exports.sumByKey = sumByKey;
exports.isSupportedUrl = isSupportedUrl;
exports.quantileAtValue = quantileAtValue;
exports.isBrowserVersionLower = isBrowserVersionLower;
exports.getChromeMajorVersion = getChromeMajorVersion;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _chromeRemoteInterface = _interopRequireDefault(require("chrome-remote-interface"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('@wdio/devtools-service:utils');
const RE_DEVTOOLS_DEBUGGING_PORT_SWITCH = /--remote-debugging-port=(\d*)/;
const RE_USER_DATA_DIR_SWITCH = /--user-data-dir=([^-]*)/;
const VERSION_PROPS = ['browserVersion', 'browser_version', 'version'];

async function findCDPInterface() {
  const chromeOptions = global.browser.capabilities['goog:chromeOptions'];

  if (chromeOptions && chromeOptions.debuggerAddress) {
    const [host, port] = chromeOptions.debuggerAddress.split(':');
    return {
      host,
      port: parseInt(port, 10)
    };
  }

  await global.browser.url('chrome://version');
  const cmdLineTextElem = await global.browser.$('#command_line');
  const cmdLineText = await cmdLineTextElem.getText();
  let port = parseInt(cmdLineText.match(RE_DEVTOOLS_DEBUGGING_PORT_SWITCH)[1], 10);

  if (port === 0) {
    const userDataDir = cmdLineText.match(RE_USER_DATA_DIR_SWITCH)[1].trim();

    const devToolsActivePortFile = _fs.default.readFileSync(_path.default.join(userDataDir, 'DevToolsActivePort'), 'utf8');

    port = parseInt(devToolsActivePortFile.split('\n').shift(), 10);
  }

  return {
    host: 'localhost',
    port
  };
}

function getCDPClient({
  host,
  port
}) {
  return new Promise(resolve => (0, _chromeRemoteInterface.default)({
    host,
    port,
    target: targets => targets.findIndex(t => t.type === 'page')
  }, resolve));
}

async function readIOStream(cdp, stream) {
  let isEOF = false;
  let tracingChunks = '';
  log.info(`start fetching IO stream with id ${stream}`);

  while (!isEOF) {
    const {
      data,
      eof
    } = await cdp('IO', 'read', {
      handle: stream
    });
    tracingChunks += data;

    if (eof) {
      isEOF = true;
      log.info(`finished fetching IO stream with id ${stream}`);
      return JSON.parse(tracingChunks);
    }
  }
}

function sumByKey(list, key) {
  return list.map(data => data[key]).reduce((acc, val) => acc + val, 0);
}

function isSupportedUrl(url) {
  return _constants.IGNORED_URLS.filter(ignoredUrl => url.startsWith(ignoredUrl)).length === 0;
}

function internalErf_(x) {
  const sign = x < 0 ? -1 : 1;
  x = Math.abs(x);
  const a1 = 0.254829592;
  const a2 = -0.284496736;
  const a3 = 1.421413741;
  const a4 = -1.453152027;
  const a5 = 1.061405429;
  const p = 0.3275911;
  const t = 1 / (1 + p * x);
  const y = t * (a1 + t * (a2 + t * (a3 + t * (a4 + t * a5))));
  return sign * (1 - y * Math.exp(-x * x));
}

function quantileAtValue(median, falloff, value) {
  const location = Math.log(median);
  const logRatio = Math.log(falloff / median);
  const shape = Math.sqrt(1 - 3 * logRatio - Math.sqrt((logRatio - 3) * (logRatio - 3) - 8)) / 2;
  const standardizedX = (Math.log(value) - location) / (Math.SQRT2 * shape);
  return (1 - internalErf_(standardizedX)) / 2;
}

function isBrowserVersionLower(caps, minVersion) {
  const browserVersion = getChromeMajorVersion(caps[VERSION_PROPS.find(prop => caps[prop])]);
  return typeof browserVersion === 'number' && browserVersion < minVersion;
}

function getChromeMajorVersion(version) {
  let majorVersion = version;

  if (typeof version === 'string') {
    majorVersion = Number(version.split('.')[0]);
    majorVersion = isNaN(majorVersion) ? version : majorVersion;
  }

  return majorVersion;
}